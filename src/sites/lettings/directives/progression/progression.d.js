// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  angular.module('vs-lettings-inner').directive('progression', function(progressionPopup, $timeout, $http, alert) {
    return {
      restrict: 'AE',
      template: require("./progression.html").default,
      replace: true,
      link: function(scope, elem) {
        var drawConnection, index, lastEditing, resize, saveAllProgressions;
        lastEditing = false;
        saveAllProgressions = function() {
          var i, j, len, progression, ref, results;
          ref = scope.progressions.items;
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            progression = ref[i];
            progression.i = i;
            results.push(scope.progressions.save(progression));
          }
          return results;
        };
        scope.editing = function() {
          var editing;
          editing = scope.progressions.$editing === scope.progression._id;
          if (editing !== lastEditing) {
            lastEditing = editing;
            scope.resize();
          }
          return editing;
        };
        drawConnection = function(ctx, item, prev) {
          ctx.beginPath();
          if (item.offsetLeft > prev.offsetLeft) {
            ctx.moveTo(item.offsetLeft + (item.clientWidth / 2) - 20, item.offsetTop + 20);
            ctx.lineTo(prev.offsetLeft + (prev.clientWidth / 2) + 20, prev.offsetTop + 20);
          } else {
            ctx.moveTo(prev.offsetLeft + (prev.clientWidth / 2) + 20, prev.offsetTop + 20);
            ctx.lineTo(prev.offsetLeft + (prev.clientWidth / 2) + 40, prev.offsetTop + 20);
          }
          ctx.strokeStyle = '#999999';
          return ctx.stroke();
        };
        resize = function(elem) {
          return $timeout(function() {
            var branchItem, branchItems, c, ctx, item, items, j, len, p, prev, results;
            c = $('canvas', elem);
            p = $('.milestones', elem);
            ctx = c[0].getContext('2d');
            c[0].width = p[0].clientWidth;
            c[0].height = p[0].clientHeight;
            items = $('.milestone', elem);
            results = [];
            for (j = 0, len = items.length; j < len; j++) {
              item = items[j];
              prev = $(item).prev()[0];
              if ($(item).parent().hasClass('branch')) {
                prev = $(item).parent().prev()[0];
              }
              if (prev) {
                if ($(prev).hasClass('milestone')) {
                  results.push(drawConnection(ctx, item, prev));
                } else if ($(prev).hasClass('branch')) {
                  branchItems = $('.milestone', prev);
                  results.push((function() {
                    var k, len1, results1;
                    results1 = [];
                    for (k = 0, len1 = branchItems.length; k < len1; k++) {
                      branchItem = branchItems[k];
                      results1.push(drawConnection(ctx, item, branchItem));
                    }
                    return results1;
                  })());
                } else {
                  results.push(void 0);
                }
              } else {
                results.push(void 0);
              }
            }
            return results;
          });
        };
        index = 0;
        scope.getIndex = function() {
          return index++;
        };
        scope.addMilestone = function(branch) {
          if (!branch) {
            branch = [];
            scope.progression.milestones.push(branch);
          }
          branch.push({
            _id: scope.generateId(8),
            title: 'New Milestone',
            notes: [],
            todos: [],
            actions: [],
            estDays: 0
          });
          return scope.resize();
        };
        scope.saveProgression = function() {
          progressionPopup.hide();
          scope.progressions.save(scope.progression);
          scope.progressions.$editing = null;
          alert.log('Progression saved');
          return scope.resize();
        };
        scope.cancel = function() {
          progressionPopup.hide();
          scope.progressions.refreshFn();
          scope.progressions.$editing = null;
          return scope.resize();
        };
        scope.edit = function() {
          scope.progressions.refreshFn();
          scope.progressions.$editing = scope.progression._id;
          return scope.resize();
        };
        scope.remove = function() {
          if (scope.property) {
            scope.property.item.$case.item.progressions.remove(scope.progression);
            return scope.property.item.$case.save();
          } else if (scope.progressions) {
            scope.progressions.delete(scope.progression);
            scope.progressions.items.remove(scope.progression);
            return saveAllProgressions();
          }
        };
        scope.moveUp = function() {
          if (scope.property) {
            scope.property.item.$case.item.progressions.moveUp(scope.progression);
            return scope.property.item.$case.save();
          } else if (scope.progressions) {
            scope.progressions.items.moveUp(scope.progression);
            return saveAllProgressions();
          }
        };
        scope.moveDown = function() {
          if (scope.property) {
            scope.property.item.$case.item.progressions.moveDown(scope.progression);
            return scope.property.item.$case.save();
          } else if (scope.progressions) {
            scope.progressions.items.moveDown(scope.progression);
            return saveAllProgressions();
          }
        };
        scope.resize = function() {
          return resize(elem);
        };
        scope.resize();
        window.addEventListener('resize', scope.resize);
        return scope.$on('$destroy', function() {
          return window.removeEventListener('resize', scope.resize);
        });
      }
    };
  });

}).call(this);
