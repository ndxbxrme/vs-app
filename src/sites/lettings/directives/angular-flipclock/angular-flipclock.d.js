// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('angular-flipclock', []).directive('flipClock', [
    '$parse',
    function($parse) {
      return {
        replace: true,
        template: '<div></div>',
        restrict: 'E',
        link: function(scope,
    element,
    attr) {
          var callbacks,
    clock,
    methods,
    optionKeys,
    options;
          optionKeys = ['autostart',
    'countdown',
    'callbacks',
    'classes',
    'clockFace',
    'defaultclockface',
    'defaultlanguage',
    'showSeconds'];
          options = {
            callbacks: {}
          };
          clock = void 0;
          methods = ['start',
    'stop',
    'setTime',
    'setCountdown',
    'getTime'];
          callbacks = ['destroy',
    'create',
    'init',
    'interval',
    'start',
    'stop',
    'reset'];
          //set options from attributes
          optionKeys.forEach(function(key) {
            if (attr[key]) {
              switch (key) {
                case 'autostart':
                  options['autoStart'] = attr[key] === 'false' ? false : true;
                  break;
                case 'defaultclockface':
                  options['defaultClockFace'] = attr[key];
                  break;
                case 'defaultlanguage':
                  options['defaultLanguage'] = attr[key];
                  break;
                default:
                  options[key] = attr[key];
                  break;
              }
            }
          });
          //init callbacks
          callbacks.forEach(function(callback) {
            if (attr[callback]) {
              options.callbacks[callback] = function() {
                $parse(attr[callback])(scope);
              };
            }
          });
          //generate clock object
          //clock = new FlipClock(element, options);
          clock = $.fn.FlipClock(element,
    options);
          //bind methods to the scope
          methods.forEach(function(method) {
            scope[method] = function() {
              return clock[method].apply(clock,
    arguments);
            };
          });
        }
      };
    }
  ]);

  // ---
// generated by js2coffee 2.2.0

}).call(this);
