// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  angular.module('vs-agency').factory('AgencyProgressionPopup', function($timeout, $http, agencyProperty, Auth, alert) {
    var data, elem, getOffset, hidden, moveToElem, progressions, property, reset, scope;
    elem = null;
    progressions = [];
    data = null;
    property = null;
    hidden = true;
    scope = null;
    reset = function() {
      if (scope) {
        scope.action = null;
        return scope.editingAction = false;
      }
    };
    getOffset = function(elm) {
      var offset;
      offset = {
        left: 0,
        top: 0
      };
      while (elm && elm.tagName !== 'BODY') {
        offset.left += elm.offsetLeft;
        offset.top += elm.offsetTop;
        elm = elm.offsetParent;
      }
      return offset;
    };
    moveToElem = function() {
      var elemLeft, offset, pointerDisplay, pointerLeft, popupWidth;
      if (elem) {
        offset = getOffset(elem);
        elemLeft = offset.left;
        offset.top += elem.clientHeight;
        popupWidth = $('.progression-popup').width();
        if (offset.left + (popupWidth + 20) > window.innerWidth) {
          offset.left = window.innerWidth - (popupWidth + 10);
        }
        offset.left -= 20;
        if (offset.left < 2) {
          offset.left = 2;
        }
        if (window.innerWidth < 410) {
          offset.left = 2;
        }
        $('.progression-popup').css(offset);
        pointerLeft = elemLeft - offset.left + 10;
        pointerDisplay = 'block';
        if (pointerLeft + 40 > popupWidth) {
          pointerDisplay = 'none';
        }
        return $('.progression-popup .pointer').css({
          left: pointerLeft,
          display: pointerDisplay
        });
      }
    };
    window.addEventListener('resize', moveToElem);
    return {
      show: function(_elem, _data, _property) {
        elem = _elem;
        data = _data;
        property = _property;
        /*
        if data.title is 'Start' and not data.completed
          data.completed = true
          data.startTime = new Date().valueOf()
          data.completedTime = new Date().valueOf()
          dezrez.updatePropertyCase Auth.getUser(), true
        else
        */
        reset();
        moveToElem();
        return hidden = false;
      },
      hide: function() {
        return hidden = true;
      },
      getHidden: function() {
        return hidden;
      },
      getTitle: function() {
        if (data) {
          return data.title;
        }
      },
      getCompleted: function() {
        if (data) {
          return data.completed;
        }
      },
      setCompleted: function() {
        if (data) {
          hidden = true;
          $http.post($http.sites["agency"].url + '/api/milestone/completed', {
            milestone: data._id,
            roleId: agencyProperty.get().RoleId
          }, $http.sites["agency"].config);
          return alert.log('Milestone updated');
        }
      },
      getCompletedTime: function() {
        if (data) {
          return data.completedTime;
        }
      },
      getProgressing: function() {
        if (data) {
          return data.progressing;
        }
      },
      setProgressing: function() {
        if (data) {
          hidden = true;
          $http.post($http.sites["agency"].url + '/api/milestone/start', {
            milestone: data._id,
            roleId: agencyProperty.get().RoleId
          }, $http.sites["agency"].config);
          return alert.log('Milestone started');
        }
      },
      getDate: function() {
        if (data) {
          return data.userCompletedTime || data.estCompletedTime;
        }
      },
      setDate: function(date) {
        if (data) {
          data.userCompletedTime = date;
          alert.log('Milestone updated');
          return agencyProperty.get().$case.save();
        }
      },
      getStartDate: function() {
        if (data) {
          if (data.startTime) {
            return new Date(data.startTime);
          } else {
            return new Date();
          }
        }
      },
      getEstDays: function() {
        if (data) {
          return data.estDays + ' ' + (data.estDays === 1 ? 'day' : 'days');
        }
      },
      addNote: function(note) {
        if (data && note) {
          data.notes.push({
            date: new Date(),
            text: note,
            item: data.title,
            side: data.side,
            user: Auth.getUser()
          });
          alert.log('Note saved');
          agencyProperty.get().$case.save();
          return note = '';
        }
      },
      getNotes: function() {
        if (data) {
          return data.notes;
        }
      },
      getData: function() {
        return data;
      },
      getProperty: function() {
        return property;
      },
      setProgressions: function(_progressions) {
        return progressions = _progressions;
      },
      getProgressions: function() {
        return progressions;
      },
      setScope: function(_scope) {
        return scope = _scope;
      },
      reset: reset
    };
  });

}).call(this);
