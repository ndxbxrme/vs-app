// Generated by CoffeeScript 2.5.1
const {propertyAdminFunctions, initForSale} = require('../../../../services/property-admin-functions.js');
(function() {
  'use strict';
  angular.module('vs-agency').controller('agencyCaseCtrl', function($scope, $stateParams, $state, $timeout, $window, $http, Auth, AgencyProgressionPopup, agencyProperty, Upload, env, alert, breadcrumbs) {
    let fetchedFirst = false;
    propertyAdminFunctions($scope, alert);
    $scope.uploadProgress = 0;
    $scope.propsOpts = {
      where: {
        RoleStatus: 'OfferAccepted',
        RoleType: 'Selling',
        IncludeStc: true
      },
      transform: {
        items: 'Collection',
        total: 'TotalCount'
      }
    };
    $scope.properties = $scope.list({
      route: `${env.PROPERTY_URL}/search`
    }, $scope.propsOpts, function(properties) {
      var i, len, property, ref, results;
      ref = properties.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        results.push(property.displayAddress = `${property.Address.Number} ${property.Address.Street}, ${property.Address.Locality}, ${property.Address.Town}, ${property.Address.Postcode}`);
      }
      return results;
    });
    $scope.notesLimit = 10;
    $scope.notesPage = 1;
    $scope.property = $scope.single({
      route: `${env.PROPERTY_URL}/property`
    }, $stateParams.roleId, function(res) {
      var property;
      property = res.item;
      property.displayAddress = `${property.Address.Number} ${property.Address.Street}, ${property.Address.Locality}, ${property.Address.Town}, ${property.Address.Postcode}`;
      breadcrumbs.setInfo(property.displayAddress);
      property.$case = $scope.single('agency:properties', property.RoleId, function(item) {
        return item.parent.search = `${item.parent.displayAddress}||${item.vendor}||${item.purchaser}`;
      });
      property.$case.parent = property;
      if(!fetchedFirst) {
        $scope.propertyadmin = $scope.single('main:propertyadmin', { RoleId: property.RoleId }, (propertyadmin) => {
          initForSale(propertyadmin, property, $scope.auth.getUser());
          return propertyadmin;
        });
      }
      fetchedFirst = true;
      return agencyProperty.set(property);
    });
    $scope.boardsList = $scope.list('main:boards');
    $scope.progressions = $scope.list('agency:progressions', {
      sort: 'i'
    });
    $scope.config = {
      prefix: 'swiper',
      modifier: 1.5,
      show: false
    };
    $scope.date = {
      date: 'today'
    };
    $scope.addNote = function() {
      var i, j, len, len1, mynote, progression, property, ref, ref1, updateProgressionNotes;
      if ($scope.note) {
        property = $scope.property.item;
        if (property && property.$case && property.$case.item) {
          if ($scope.note.date) {
            updateProgressionNotes = function(milestones, note) {
              var branch, i, len, milestone, mynote, results;
              results = [];
              for (i = 0, len = milestones.length; i < len; i++) {
                branch = milestones[i];
                results.push((function() {
                  var j, len1, results1;
                  results1 = [];
                  for (j = 0, len1 = branch.length; j < len1; j++) {
                    milestone = branch[j];
                    if (milestone.notes && milestone.notes.length) {
                      results1.push((function() {
                        var k, len2, ref, results2;
                        ref = milestone.notes;
                        results2 = [];
                        for (k = 0, len2 = ref.length; k < len2; k++) {
                          mynote = ref[k];
                          if (mynote.date === note.date && mynote.item === note.item && mynote.side === note.side) {
                            mynote.text = note.text;
                            mynote.updatedAt = new Date();
                            results2.push(mynote.updatedBy = Auth.getUser());
                          } else {
                            results2.push(void 0);
                          }
                        }
                        return results2;
                      })());
                    } else {
                      results1.push(void 0);
                    }
                  }
                  return results1;
                })());
              }
              return results;
            };
            if (property.$case.item.notes) {
              ref = property.$case.item.notes;
              for (i = 0, len = ref.length; i < len; i++) {
                mynote = ref[i];
                if (mynote.date === $scope.note.date && mynote.item === $scope.note.item && mynote.side === $scope.note.side) {
                  mynote.text = $scope.note.text;
                  mynote.updatedAt = new Date();
                  mynote.updatedBy = Auth.getUser();
                }
              }
            }
            ref1 = property.$case.item.progressions;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              progression = ref1[j];
              updateProgressionNotes(progression.milestones, $scope.note);
            }
          } else {
            property.$case.item.notes.push({
              date: new Date(),
              text: $scope.note.text,
              item: 'Case Note',
              side: '',
              user: Auth.getUser()
            });
          }
          property.$case.save();
          alert.log('Note added');
          return $scope.note = null;
        }
      }
    };
    $scope.editNote = function(note) {
      $scope.note = JSON.parse(JSON.stringify(note));
      return $('.add-note')[0].scrollIntoView(true);
    };
    $scope.deleteNote = function(note) {
      var deleteProgressionNotes, i, j, len, len1, mynote, progression, property, ref, ref1;
      property = $scope.property.item;
      deleteProgressionNotes = function(milestones, note) {
        var branch, i, j, k, len, len1, len2, milestone, mynote, ref;
        for (i = 0, len = milestones.length; i < len; i++) {
          branch = milestones[i];
          for (j = 0, len1 = branch.length; j < len1; j++) {
            milestone = branch[j];
            if (milestone.notes && milestone.notes.length) {
              ref = milestone.notes;
              for (k = 0, len2 = ref.length; k < len2; k++) {
                mynote = ref[k];
                if (mynote.date === note.date && mynote.item === note.item && mynote.side === note.side) {
                  return milestone.notes.remove(mynote);
                }
              }
            }
          }
        }
      };
      if (property.$case.item.notes) {
        ref = property.$case.item.notes;
        for (i = 0, len = ref.length; i < len; i++) {
          mynote = ref[i];
          if (mynote.date === note.date && mynote.item === note.item && mynote.side === note.side) {
            property.$case.item.notes.remove(mynote);
            break;
          }
        }
      }
      ref1 = property.$case.item.progressions;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        progression = ref1[j];
        deleteProgressionNotes(progression.milestones, note);
      }
      property.$case.save();
      alert.log('Note deleted');
      return $scope.note = null;
    };
    $scope.getNotes = function() {
      var fetchProgressionNotes, i, j, k, len, len1, len2, note, notes, progression, property, ref, ref1, ref2;
      property = $scope.property.item;
      if (property && property.$case && property.$case.item) {
        notes = [];
        fetchProgressionNotes = function(milestones) {
          var branch, i, len, milestone, note, results;
          results = [];
          for (i = 0, len = milestones.length; i < len; i++) {
            branch = milestones[i];
            results.push((function() {
              var j, len1, results1;
              results1 = [];
              for (j = 0, len1 = branch.length; j < len1; j++) {
                milestone = branch[j];
                if (milestone.notes && milestone.notes.length) {
                  results1.push((function() {
                    var k, len2, ref, results2;
                    ref = milestone.notes;
                    results2 = [];
                    for (k = 0, len2 = ref.length; k < len2; k++) {
                      note = ref[k];
                      results2.push(notes.push(note));
                    }
                    return results2;
                  })());
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            })());
          }
          return results;
        };
        ref = property.$case.item.progressions;
        for (i = 0, len = ref.length; i < len; i++) {
          progression = ref[i];
          fetchProgressionNotes(progression.milestones);
        }
        if (property.$case.item.notes && property.$case.item.notes.length) {
          ref1 = property.$case.item.notes;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            note = ref1[j];
            notes.push(note);
          }
        }
        if ($scope.auth.checkRoles(['superadmin', 'admin'])) {
          if (property.$case.item.advanceRequests && property.$case.item.advanceRequests.length) {
            ref2 = property.$case.item.advanceRequests;
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              note = ref2[k];
              notes.push(note);
            }
          }
        }
        return notes;
      }
    };
    $scope.addProgression = function(progression) {
      var property;
      property = $scope.property.item;
      if (property && property.$case && property.$case.item) {
        if (!property.$case.item.progressions) {
          property.$case.item.progressions = [];
        }
        property.$case.item.progressions.push(JSON.parse(JSON.stringify(progression)));
        return property.$case.save();
      }
    };
    $scope.addChain = function(chain, side) {
      var index;
      index = 0;
      if (side === 'seller') {
        index = $scope.property.item.$case.item.chainSeller.length;
      }
      chain.push({
        note: '',
        reference: '',
        side: side
      });
      return $scope.chainEdit = side + index;
    };
    $scope.editChain = function(side, index) {
      return $scope.chainEdit = side + index;
    };
    $scope.saveChain = function(item) {
      var i, len, prop, ref;
      if (item.property) {
        ref = $scope.properties.items;
        for (i = 0, len = ref.length; i < len; i++) {
          prop = ref[i];
          if (prop.RoleId === +item.property) {
            item.propDetails = objtrans(prop, {
              id: true,
              address: function(property) {
                return `${property.Address.Number} ${property.Address.Street}, ${property.Address.Locality}, ${property.Address.Town}`;
              },
              image: 'Images[0].Url',
              price: 'Price.PriceValue'
            });
          }
        }
      }
      $scope.chainEdit = null;
      $scope.property.item.$case.save();
      return alert.log('Chain saved');
    };
    $scope.deleteChainItem = function(item, side) {
      var chain;
      chain = side === 'buyer' ? $scope.property.item.$case.item.chainBuyer : $scope.property.item.$case.item.chainSeller;
      chain.remove(item);
      return $scope.saveChain();
    };
    $scope.uploadFiles = function(files, errFiles) {
      var mycase;
      mycase = $scope.property.item.$case;
      if (files) {
        $scope.uploadProgress = 0;
        $scope.documentUploading = true;
        return Upload.upload({
          url: $http.sites["agency"].url + '/api/upload',
          data: {
            file: files,
            user: Auth.getUser()
          },
          headers: $http.sites["agency"].config.headers
        }).then(function(response) {
          var document, i, len, ref;
          $scope.documentUploading = false;
          if (response.data) {
            $scope.uploadProgress = 0;
            if (!mycase.item.documents) {
              mycase.item.documents = [];
            }
            ref = response.data;
            for (i = 0, len = ref.length; i < len; i++) {
              document = ref[i];
              if(ref[i].filename)
                mycase.item.documents.push(document);
            }
            alert.log('Document uploaded');
            return mycase.save();
          }
        }, function(err) {
          $scope.documentUploading = false;
          return false;
        }, function(progress) {
          return $scope.uploadProgress = Math.min(100, parseInt(100.0 * progress.loaded / progress.total));
        });
      }
    };
    $scope.saveDocument = function(document) {
      document.editing = false;
      alert.log('Document updated');
      return $scope.property.item.$case.save();
    };
    $scope.deleteDocument = function(document) {
      if ($window.confirm('Are you sure you want to delete this document?')) {
        $scope.property.item.$case.item.documents.splice($scope.property.item.$case.item.documents.indexOf(document), 1);
        alert.log('Document deleted');
        return $scope.property.item.$case.save();
      }
    };
    $scope.hideDropdown = function(dropdown) {
      return $timeout(function() {
        return $scope[dropdown] = false;
      }, 200);
    };
    $scope.advanceProgression = function() {
      return $scope.modal({
        template: require('../../modals/advance-progression/advance-progression.html').default,
        controller: 'agencyAdvanceProgressionCtrl',
        data: {
          property: objtrans($scope.property.item, {
            roleId: 'RoleId',
            displayAddress: true,
            advanceRequests: '$case.item.advanceRequests',
            progressions: '$case.item.progressions'
          })
        }
      }, $http.sites["agency"].config).then(function() {
        return alert.log('Request submitted');
      }, function() {
        return false;
      });
    };
    $scope.applyRequest = function(request) {
      var advMilestone, advanceTo, branch, i, j, k, l, len, len1, len2, len3, milestone, progression, ref, ref1, ref2;
      ref = $scope.property.item.$case.item.progressions;
      for (i = 0, len = ref.length; i < len; i++) {
        progression = ref[i];
        ref1 = progression.milestones;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          branch = ref1[j];
          for (k = 0, len2 = branch.length; k < len2; k++) {
            milestone = branch[k];
            advanceTo = new Date(request.advanceTo);
            ref2 = request.milestones;
            for (l = 0, len3 = ref2.length; l < len3; l++) {
              advMilestone = ref2[l];
              if (milestone._id === advMilestone._id) {
                milestone.userCompletedTime = advanceTo.valueOf();
              }
            }
          }
        }
      }
      request.applied = true;
      return $scope.property.item.$case.save();
    };
    $scope.fallenThrough = function() {
      if (window.confirm('Are you sure you want to flag this property as Fallen through?')) {
        $scope.property.item.$case.item.override = $scope.property.item.$case.override || {};
        $scope.property.item.$case.item.override.deleted = true;
        $scope.property.item.$case.item.override.reason = 'fallenThrough';
        $scope.property.item.$case.save();
        return $state.go('cases');
      }
    };
    $scope.refreshDetails = function() {
      const roleId = $scope.property.item.RoleId;
      fetch(`https://server.vitalspace.co.uk/dezrez/refresh/${roleId}`, {
        method: 'POST'
      });
      alert.log('Solicitor Details Incoming');
    };
    return $scope.$on('$destroy', function() {
      return AgencyProgressionPopup.hide();
    });
  });

}).call(this);
