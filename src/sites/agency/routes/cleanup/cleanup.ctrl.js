// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  angular.module('vs-agency').controller('agencyCleanupCtrl', function($scope, $filter, $timeout, $http) {
    $scope.loading = true;
    $scope.progressions = $scope.list('agency:progressions', {
      isdefault: true
    }, function(progressions) {
      return $scope.properties = $scope.properties || $scope.list('agency:properties', null, function(properties) {
        var i, property, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
        i = properties.items.length;
        while (i-- > 0) {
          property = properties.items[i];
          property.displayAddress = ((ref = property.override) != null ? ref.address : void 0) || `${property.offer.Property.Address.Number} ${property.offer.Property.Address.Street}, ${property.offer.Property.Address.Locality}`;
          property.exchangeDate = ((ref1 = property.progressions[0]) != null ? (ref2 = ref1.milestones[10]) != null ? (ref3 = ref2[0]) != null ? ref3.userCompletedTime : void 0 : void 0 : void 0) || ((ref4 = property.progressions[0]) != null ? (ref5 = ref4.milestones[10]) != null ? (ref6 = ref5[0]) != null ? ref6.estCompletedTime : void 0 : void 0 : void 0);
          if (property.milestoneIndex && property.milestoneIndex[progressions.items[0]._id]) {
            if (property.milestoneIndex[progressions.items[0]._id] > 9) {
              properties.items.splice(i, 1);
              continue;
            }
          }
          if (property.exchangeDate > new Date().valueOf() || ((ref7 = property.override) != null ? ref7.deleted : void 0)) {
            properties.items.splice(i, 1);
          }
        }
        return $scope.loading = false;
      });
    });
    $scope.sort = 'offer.Property.Address.Street';
    $scope.doSort = function(field) {
      if (!$scope.sort) {
        $scope.sort = '';
      }
      if ($scope.sort.indexOf(field) === -1) {
        $scope.sort = field;
        return $scope.sortDir = 'ASC';
      } else {
        if ($scope.sort.indexOf('-') === 0) {
          $scope.sort = field;
          return $scope.sortDir = 'ASC';
        } else {
          $scope.sort = `-${field}`;
          return $scope.sortDir = 'DESC';
        }
      }
    };
    $scope.class = function(field) {
      var ref;
      return {
        "has-sort": true,
        sorting: (-1 < (ref = $scope.sort.indexOf(field)) && ref < 2),
        desc: $scope.sortDir === 'DESC'
      };
    };
    $scope.complete = function(property) {
      var j, k, len, len1, progression, ref, ref1;
      property.processing = true;
      if (!property.progressions || property.progressions.length === 0) {
        property.progressions = [];
        ref = $scope.progressions.items;
        for (j = 0, len = ref.length; j < len; j++) {
          progression = ref[j];
          property.progressions.push(JSON.parse(JSON.stringify(progression)));
        }
      }
      property.milestoneIndex = property.milestoneIndex || {};
      if (property.progressions && property.progressions.length) {
        ref1 = property.progressions;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          progression = ref1[k];
          progression.milestones[progression.milestones.length - 1][0].completed = true;
          progression.milestones[progression.milestones.length - 1][0].completedDate = property.exchangeDate;
          property.milestoneIndex[progression._id] = progression.milestones.length - 1;
        }
        property.milestone = Object.assign({}, property.progressions[0].milestones[property.progressions[0].milestones.length - 1][0]);
      }
      $http.post($http.sites["agency"].url + `/api/properties/${property._id}`, {
        progressions: property.progressions,
        milestone: property.milestone,
        milestoneIndex: property.milestoneIndex
      });
      return true;
    };
    $scope.delete = function(property) {
      property.processing = true;
      return $http.post($http.sites["agency"].url + `/api/properties/${property._id}`, {
        override: {
          deleted: true,
          reason: 'deleted'
        }
      });
    };
    return $scope.fallenThrough = function(property) {
      property.processing = true;
      $http.post($http.sites["agency"].url + `/api/properties/${property._id}`, {
        override: {
          deleted: true,
          reason: 'fallenThrough'
        }
      });
      return true;
    };
  });

}).call(this);
