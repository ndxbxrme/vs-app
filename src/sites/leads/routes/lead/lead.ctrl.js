// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  angular.module('vs-leads').controller('leadsLeadCtrl', function($scope, $http, $stateParams, env, Auth, Confirmer, breadcrumbs) {
    $scope.selectedProperty = null;
    $scope.defaultLast = 'leads';
    $scope.lead = $scope.single('leads:leads', $stateParams, function(lead) {
      if (JSON.stringify(lead.item) === '{}') {
        $scope.editing = true;
        return lead.item = {
          roleType: 'Selling',
          source: 'local'
        };
      }
      else {
        breadcrumbs.setInfo(lead.item.property.address);
      }
    });
    $scope.sources = {
      items: [
        {
          name: 'Email',
          _id: 'email'
        },
        {
          name: 'Telephone',
          _id: 'telephone'
        },
        {
          name: 'Walk In',
          _id: 'walkin'
        },
        {
          name: 'OnTheMarket',
          _id: 'onthemarket'
        }
      ]
    };
    $scope.selling = $scope.list({
      route: `${env.PROPERTY_URL}/search`
    }, {
      where: {
        RoleType: 'Selling',
        IncludeStc: true
      },
      transform: {
        items: 'Collection',
        total: 'TotalCount'
      }
    }, function(properties) {
      var i, len, property, ref, results;
      ref = properties.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        property.name = property.displayAddress;
        results.push(property._id = property.RoleId);
      }
      return results;
    });
    $scope.letting = $scope.list({
      route: `${env.PROPERTY_URL}/search`
    }, {
      where: {
        RoleType: 'Letting',
        IncludeStc: true
      },
      transform: {
        items: 'Collection',
        total: 'TotalCount'
      }
    }, function(properties) {
      var i, len, property, ref, results;
      ref = properties.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        property.name = property.displayAddress;
        results.push(property._id = property.RoleId);
      }
      return results;
    });
    $scope.deleteLead = function() {
      return Confirmer.confirm({
        title: $scope.m('lead-delete-title'),
        message: $scope.m('lead-delete-message')
      }, $http.sites["leads"].config).then(function() {
        $scope.lead.delete();
        return $scope.auth.goToLast();
      }, function() {
        return false;
      });
    };
    $scope.bookLead = function() {
      $scope.lead.item.booked = true;
      $scope.lead.save();
      return $scope.auth.goToLast();
    };
    $scope.addNote = function() {
      var i, len, note, ref;
      if (!$scope.lead.item.notes) {
        $scope.lead.item.notes = [];
      }
      if ($scope.note) {
        if ($scope.note.date) {
          ref = $scope.lead.item.notes;
          for (i = 0, len = ref.length; i < len; i++) {
            note = ref[i];
            if (note.date === $scope.note.date) {
              note.text = $scope.note.text;
              note.updatedAd = new Date();
              note.updatedBy = Auth.getUser();
            }
          }
        } else {
          $scope.lead.item.notes.push({
            date: new Date(),
            text: $scope.note.text,
            user: Auth.getUser()
          });
        }
        if ($scope.lead.item._id) {
          $scope.lead.save();
        }
        //alert.log 'Note added'
        return $scope.note = null;
      }
    };
    $scope.editNote = function(note) {
      $scope.note = JSON.parse(JSON.stringify(note));
      return $('.add-note')[0].scrollIntoView(true);
    };
    $scope.getNotes = function() {
      if ($scope.lead && $scope.lead.item && $scope.lead.item.notes) {
        return $scope.lead.item.notes;
      }
    };
    $scope.deleteNote = function(note) {
      var i, len, mynote, ref;
      ref = $scope.lead.item.notes;
      for (i = 0, len = ref.length; i < len; i++) {
        mynote = ref[i];
        if (mynote.date === note.date) {
          $scope.lead.item.notes.remove(mynote);
        }
      }
      if ($scope.lead.item._id) {
        return $scope.lead.save();
      }
    };
    $scope.restore = function() {
      $http.post($http.sites["leads"].url + `/api/leads/${$scope.lead.item._id}`, {
        deleted: null,
        booked: null
      });
      return Auth.goToLast('selling');
    };
    return $scope.saveFn = function(cb) {
      var i, len, property, ref;
      if ($scope.selectedProperty && $scope.lead.item.roleType !== 'Valuation') {
        ref = $scope[$scope.lead.item.roleType.toLowerCase()].items;
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          if (property._id.toString() === $scope.selectedProperty) {
            $scope.lead.item.roleId = property.RoleId;
            $scope.lead.item.propertyId = property.PropertyId;
            $scope.lead.item.price = property.Price.PriceValue;
            $scope.lead.item.date = new Date();
            $scope.lead.item.property = {
              address: `${property.Address.Number || property.Address.BuildingName} ${property.Address.Street}`,
              address2: `${property.Address.Locality}`,
              town: property.Address.Town,
              county: property.Address.County,
              postcode: property.Address.Postcode
            };
            break;
          }
        }
      }
      return cb(true);
    };
  });

}).call(this);
