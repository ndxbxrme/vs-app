// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  angular.module('ndx').directive('numeric', function($timeout, $filter, $window) {
    return {
      restrict: 'EA',
      template: require("./numeric.html").default,
      require: 'ngModel',
      replace: true,
      scope: {
        ngModel: '=',
        ngChange: '&',
        placeholder: '@',
        tab: '@',
        numDisabled: '='
      },
      link: function(scope, elem, attrs, ctrl) {
        var android, androidDown, checkBounds, checkPattern, chrome, decimalPoints, iPhone, keyDown, pattern, setValidity, step, ua;
        ua = $window.navigator.userAgent;
        iPhone = /iphone/i.test(ua);
        chrome = /chrome/i.test(ua);
        android = /android/i.test(ua);
        step = 1;
        decimalPoints = 0;
        if (angular.isDefined(attrs.step)) {
          step = +attrs.step;
        } else if (angular.isDefined(attrs.decimal)) {
          step = Math.pow(10, -attrs.decimal);
        }
        if (attrs.scroll) {
          angular.element(elem).find('input').bind('mousewheel DOMMouseScroll', function(event) {
            var delta;
            if ($(event.target).is(":focus")) {
              delta = event.originalEvent.deltaY || (event.originalEvent.wheelDelta * -1);
              event.preventDefault();
              if (delta < 0) {
                return $timeout(function() {
                  return scope.up();
                });
              } else {
                return $timeout(function() {
                  return scope.down();
                });
              }
            }
          });
        }
        angular.element(elem).find('input').bind('blur', function() {
          return $timeout(function() {
            if (scope.ngModel) {
              checkBounds(scope.ngModel);
              scope.ngModel = $filter('number')(+scope.ngModel.toString().replace(',', ''), attrs.decimal || 0);
            }
            if (!scope.ngModel && attrs.default) {
              return scope.ngModel = attrs.default;
            }
          });
        });
        $timeout(function() {
          if (scope.ngModel) {
            scope.ngModel = $filter('number')(+scope.ngModel.toString().replace(',', ''), attrs.decimal || 0);
          }
          if (!scope.ngModel && attrs.default) {
            return scope.ngModel = attrs.default;
          }
        });
        scope.up = function() {
          if (!scope.ngModel) {
            scope.ngModel = '0';
          }
          scope.ngModel = $filter('number')(+scope.ngModel.toString().replace(',', '') + step, attrs.decimal || 0);
          return checkBounds(scope.ngModel);
        };
        scope.down = function() {
          if (!scope.ngModel) {
            scope.ngModel = '0';
          }
          scope.ngModel = $filter('number')(+scope.ngModel.toString().replace(',', '') - step, attrs.decimal || 0);
          return checkBounds(scope.ngModel);
        };
        checkBounds = function(val, clear) {
          if (val) {
            val = val.toString().replace(',', '');
            if ((angular.isDefined(attrs.max) && attrs.max) || attrs.max === 0) {
              if (+val >= +attrs.max) {
                scope.ngModel = $filter('number')(attrs.max);
                scope.ngModel = clear ? '' : scope.ngModel;
              }
            }
            if ((angular.isDefined(attrs.min) && attrs.min) || attrs.min === 0) {
              if (+val < +attrs.min) {
                scope.ngModel = $filter('number')(attrs.min);
                return scope.ngModel = clear ? '' : scope.ngModel;
              }
            }
          }
        };
        setValidity = function(val) {
          if (val) {
            val = val.toString().replace(',', '');
            if ((angular.isDefined(attrs.max) && attrs.max) || attrs.max === 0) {
              if (+val > +attrs.max) {
                ctrl.$setValidity('max', false);
              } else {
                ctrl.$setValidity('max', true);
              }
            }
            if ((angular.isDefined(attrs.min) && attrs.min) || attrs.min === 0) {
              if (+val < +attrs.min) {
                return ctrl.$setValidity('min', false);
              } else {
                return ctrl.$setValidity('min', true);
              }
            }
          }
        };
        scope.$watch(function() {
          return attrs.min + attrs.max;
        }, function() {
          return setValidity(scope.ngModel);
        });
        ctrl.$formatters.unshift(function(val) {
          setValidity(val);
          if (typeof scope.ngChange === "function") {
            scope.ngChange();
          }
          return val;
        });
        //mask
        pattern = /[^\d-\.]/g;
        if (attrs.min === '0') {
          pattern = /[^\d\.]/g;
        }
        checkPattern = function(key) {
          var text;
          text = (scope.ngModel || '') + key;
          return !pattern.test(text);
        };
        keyDown = function(event) {
          if (event.key.length !== 1 || event.altKey || event.ctrlKey) {
            return;
          }
          if (!checkPattern(event.key)) {
            return event.preventDefault();
          }
        };
        androidDown = function() {
          return $timeout(function() {
            var results;
            results = [];
            while (!checkPattern('')) {
              results.push(scope.ngModel = scope.ngModel.substr(0, scope.ngModel.length - 1));
            }
            return results;
          });
        };
        if (android) {
          elem.on('keyup', androidDown);
        } else {
          elem.on('keydown', keyDown);
        }
        return scope.$on('$destroy', function() {
          if (android) {
            return elem.off('keyup', androidDown);
          } else {
            return elem.off('keydown', keyDown);
          }
        });
      }
    };
  });

}).call(this);
